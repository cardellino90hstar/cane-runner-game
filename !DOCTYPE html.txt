<!DOCTYPE html>
<html lang="it">
<head>
  <meta charset="UTF-8">
  <title>Cane Runner</title>
  <style>
    html, body {
      margin: 0;
      padding: 0;
      overflow: hidden;
      background: #f9f0e3;
    }
    canvas {
      display: block;
      background: #87ceeb;
    }
  </style>
</head>
<body>
<canvas id="game"></canvas>

<script>
const canvas = document.getElementById('game');
const ctx = canvas.getContext('2d');
canvas.width = window.innerWidth;
canvas.height = 300;

// === Assets ===
const dogImg = new Image();
dogImg.src = 'https://upload.wikimedia.org/wikipedia/commons/5/55/Trex_ChromeOfflineGame.png'; // TEMP (replace with your dog image)

const jumpSound = new Audio('https://actions.google.com/sounds/v1/human_voices/human_grunt.ogg'); // TEMP jump sound
const bgMusic = new Audio('https://cdn.pixabay.com/audio/2023/03/28/audio_0c45b37f7e.mp3');
bgMusic.loop = true;
bgMusic.volume = 0.3;
bgMusic.play();

// === Game Variables ===
let dog = {
  x: 50,
  y: canvas.height - 80,
  width: 60,
  height: 60,
  velocityY: 0,
  jumping: false
};

let gravity = 1.5;
let obstacles = [];
let bullets = [];
let frame = 0;
let score = 0;

function spawnObstacle() {
  obstacles.push({
    x: canvas.width,
    y: canvas.height - 60,
    width: 40 + Math.random() * 40,
    height: 40,
    speed: 6
  });
}

function drawDog() {
  ctx.fillStyle = '#ff69b4';
  ctx.drawImage(dogImg, dog.x, dog.y, dog.width, dog.height);
}

function drawObstacles() {
  ctx.fillStyle = '#000';
  obstacles.forEach(ob => {
    ctx.fillRect(ob.x, ob.y, ob.width, ob.height);
    ob.x -= ob.speed;
  });
  obstacles = obstacles.filter(ob => ob.x + ob.width > 0);
}

function drawBullets() {
  ctx.fillStyle = 'orange';
  bullets.forEach(b => {
    ctx.fillRect(b.x, b.y, b.width, b.height);
    b.x += b.speed;
  });
  bullets = bullets.filter(b => b.x < canvas.width);
}

function handleCollisions() {
  obstacles.forEach((ob, i) => {
    // Check bullet collision
    bullets.forEach((b, j) => {
      if (b.x < ob.x + ob.width && b.x + b.width > ob.x &&
          b.y < ob.y + ob.height && b.y + b.height > ob.y) {
        obstacles.splice(i, 1);
        bullets.splice(j, 1);
        score += 10;
      }
    });
  });
}

function update() {
  frame++;
  ctx.clearRect(0, 0, canvas.width, canvas.height);
  
  // Gravity
  if (dog.y < canvas.height - dog.height - 20) {
    dog.velocityY += gravity;
    dog.y += dog.velocityY;
  } else {
    dog.y = canvas.height - dog.height - 20;
    dog.jumping = false;
    dog.velocityY = 0;
  }

  drawDog();
  drawObstacles();
  drawBullets();
  handleCollisions();

  // Spawn new obstacles
  if (frame % 90 === 0) spawnObstacle();

  // Score
  ctx.fillStyle = '#000';
  ctx.font = '20px Arial';
  ctx.fillText('Score: ' + score, 10, 30);

  requestAnimationFrame(update);
}

// === Controls ===
document.addEventListener('keydown', e => {
  if (e.code === 'Space' && !dog.jumping) {
    dog.velocityY = -20;
    dog.jumping = true;
    jumpSound.play();
  }
  if (e.code === 'KeyZ') {
    bullets.push({
      x: dog.x + dog.width,
      y: dog.y + dog.height / 2,
      width: 10,
      height: 5,
      speed: 10
    });
  }
});

update();
</script>
</body>
</html>
